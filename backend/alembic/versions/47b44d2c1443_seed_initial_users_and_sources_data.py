# alembic/versions/...._seed_initial_users_and_sources_data.py

"""Seed initial users and sources data

Revision ID: <auto-generated>
Revises: <previous_revision_id>
Create Date: 2025-10-18 21:06:04.991274

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e6a1b2c3d4f5' 
down_revision: Union[str, None] = '3dbc642555da'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # users 테이블에 대한 테이블 객체 정의
    users_table = sa.table(
        'users',
        sa.column('id', sa.Integer),
        sa.column('email', sa.String),
        sa.column('username', sa.String),
        sa.column('hashed_password', sa.String),
        sa.column('is_active', sa.Boolean)
    )

    # sources 테이블에 대한 테이블 객체 정의
    sources_table = sa.table(
        'sources',
        sa.column('id', sa.Integer),
        sa.column('title', sa.String),
        sa.column('source_type', sa.String), # Enum은 문자열로 처리
        sa.column('creator', sa.String)
    )

    # op.bulk_insert를 사용하여 데이터 대량 삽입
    op.bulk_insert(
        users_table,
        [
            {
                'id': 1, 
                'email': 'test@test.com', 
                'username': 'testuser',
                # 중요: 실제로는 해싱된 비밀번호를 넣어야 합니다.
                # 지금은 임시로 'hashed_password_placeholder'를 사용합니다.
                'hashed_password': 'hashed_password_placeholder', 
                'is_active': True
            },
        ]
    )

    op.bulk_insert(
        sources_table,
        [
            {
                'id': 1, 
                'title': '임시 출처 (영화)', 
                'source_type': 'movie', 
                'creator': '임시 감독'
            },
        ]
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # downgrade 시에는 데이터를 삭제합니다.
    op.execute("DELETE FROM sources WHERE id IN (1)")
    op.execute("DELETE FROM users WHERE id IN (1)")

    # ### end Alembic commands ###